/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.machinalny;

import com.machinalny.kafka.FakeAuctionConsumer;
import com.machinalny.service.AuctionService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.web.servlet.MockMvc;

import java.time.Duration;

import static org.awaitility.Awaitility.await;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@DirtiesContext
@AutoConfigureMockMvc
@EmbeddedKafka(partitions = 1, brokerProperties = {"listeners=PLAINTEXT://localhost:9092", "port=9092"})
class AuctionSniperEndToEndTest {

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private FakeAuctionConsumer auctionServer;
    @Autowired
    private AuctionService auctionService;

    @Value("${test.auction1}")
    private String auctionTopic1;

    @Test
    void sniperJoinsAuctionUntilAuctionClose() throws Exception {
        auctionServer.startSellingItem();
        this.mockMvc.perform(post("/api/auction/sniper/")
                .content(auctionTopic1));
        auctionService.startBiddingIn(auctionTopic1);
        auctionServer.hasReceivedJoinRequestFromSniper();
        auctionServer.announceClosed();
        await().atMost(Duration.ofSeconds(20))
                .pollInterval(Duration.ofSeconds(3)).untilAsserted(() ->
                        this.mockMvc.perform(get("/api/auction/sniper/" + auctionTopic1))
                                .andExpect(status().is2xxSuccessful())
                                .andExpect(jsonPath("$.state").value("LOST")));
    }

}
